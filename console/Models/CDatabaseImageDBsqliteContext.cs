// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ImageDB.Models;

public partial class CDatabaseImageDBsqliteContext : DbContext
{
    public CDatabaseImageDBsqliteContext()
    {
    }

    public CDatabaseImageDBsqliteContext(DbContextOptions<CDatabaseImageDBsqliteContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Batch> Batches { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<PeopleTag> PeopleTags { get; set; }

    public virtual DbSet<PhotoLibrary> PhotoLibraries { get; set; }

    public virtual DbSet<RelationLocation> RelationLocations { get; set; }

    public virtual DbSet<RelationPeopleTag> RelationPeopleTags { get; set; }

    public virtual DbSet<RelationTag> RelationTags { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlite("Data Source=C:\\Database\\ImageDB.sqlite");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Batch>(entity =>
        {
            entity.ToTable("Batch");

            entity.Property(e => e.BatchId).HasColumnName("BatchID");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.ToTable("Image");

            entity.HasIndex(e => e.Filepath, "IX_Image_Filepath").IsUnique();

            entity.Property(e => e.Altitude).HasColumnType("NUMERIC");
            entity.Property(e => e.Latitude).HasColumnType("NUMERIC");
            entity.Property(e => e.Longitude).HasColumnType("NUMERIC");
            entity.Property(e => e.Sha1).HasColumnName("SHA1");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.ToTable("Location");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasKey(e => e.LogEntryId);

            entity.ToTable("Log");

            entity.Property(e => e.BatchId).HasColumnName("BatchID");
        });

        modelBuilder.Entity<PeopleTag>(entity =>
        {
            entity.ToTable("PeopleTag");

            entity.HasIndex(e => e.PersonName, "IX_PeopleTag_PersonName").IsUnique();

            entity.Property(e => e.Fsid).HasColumnName("FSId");
        });

        modelBuilder.Entity<PhotoLibrary>(entity =>
        {
            entity.ToTable("PhotoLibrary");

            entity.Property(e => e.Folder).IsRequired();
        });

        modelBuilder.Entity<RelationLocation>(entity =>
        {
            entity.HasKey(e => e.LocationRelationId);

            entity.ToTable("relationLocation");
        });

        modelBuilder.Entity<RelationPeopleTag>(entity =>
        {
            entity.HasKey(e => e.PeopleRelationId);

            entity.ToTable("relationPeopleTag");
        });

        modelBuilder.Entity<RelationTag>(entity =>
        {
            entity.ToTable("relationTag");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.ToTable("Tag");

            entity.HasIndex(e => e.TagName, "IX_Tag_TagName").IsUnique();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}